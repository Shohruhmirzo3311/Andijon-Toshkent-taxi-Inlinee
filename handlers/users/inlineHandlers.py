from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards.inline.acceptClient import accept_client_keyboard
from keyboards.inline.callbackData import client_callback
from loader import dp


@dp.inline_handler()
async def inline_start(query: types.InlineQuery):
    results = []

    # ‚úÖ If user typed only @BotName (no query text)
    if not query.query.strip():
        results.append(
            types.InlineQueryResultArticle(
                id="start_bot",
                title="üöñ –í–æ–¥–∏–π —Ç–∞–∫—Å–∏ —Ö–∏–∑–º–∞—Ç–ª–∞—Ä–∏",
                description="–ê–Ω–¥–∏–∂–æ–Ω / –ù–∞–º–∞–Ω–≥–∞–Ω / –§–∞—Ä“ì–æ–Ω–∞ ‚Üî –¢–æ—à–∫–µ–Ω—Ç",
                input_message_content=types.InputTextMessageContent(
                    message_text="üöñ –í–æ–¥–∏–π —Ç–∞–∫—Å–∏"
                ),
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        text="üöñ –¢–∞–∫—Å–∏ —Ö–∏–∑–º–∞—Ç–∏–Ω–∏ –±–æ—à–ª–∞—à",
                        url="https://t.me/toshkent_t_bot?start=start_inline"
                    )
                )
            )
        )
    else:
        # ‚ùå If they typed something ‚Üí ignore or show a simple "no result"
        results.append(
            types.InlineQueryResultArticle(
                id="not_used",
                title="‚ùå –§–∞“õ–∞—Ç @toshkent_t_bot —ë–∑–∏–Ω–≥",
                description="“ö–∏–¥–∏—Ä—É–≤ —à–∞—Ä—Ç —ç–º–∞—Å",
                input_message_content=types.InputTextMessageContent(
                    message_text="‚ùå –ù–æ—Ç—û“ì—Ä–∏ “õ–∏–¥–∏—Ä—É–≤"
                )
            )
        )

    await query.answer(results=results, cache_time=1)
